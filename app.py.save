from flask import Flask, render_template, request, Response, jsonify, make_response
import requests
import re
import uuid
import sqlite3
import os
from datetime import datetime

from g4f.client import Client
from g4f.Provider import OIVSCodeSer0501

app = Flask(__name__)
app.secret_key = 'Ryanisstupid'

DB_PATH = 'chat.db'
client = Client()
API_URL = "https://www.chatwithmono.xyz/api/chat"

def get_db():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    db = get_db()
    db.execute("""
        CREATE TABLE IF NOT EXISTS chat (
            id TEXT PRIMARY KEY,
            user_token TEXT,
            title TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """)
    db.execute("""
        CREATE TABLE IF NOT EXISTS message (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id TEXT,
            user_token TEXT,
            role TEXT,
            content TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(chat_id) REFERENCES chat(id)
        )
    """)
    db.commit()

def create_chat(chat_id, user_token, title="새 채팅"):
    db = get_db()
    db.execute("INSERT INTO chat (id, user_token, title) VALUES (?, ?, ?)", (chat_id, user_token, title))
    db.commit()

def save_message(chat_id, user_token, role, content):
    db = get_db()
    db.execute("INSERT INTO message (chat_id, user_token, role, content) VALUES (?, ?, ?, ?)", (chat_id, user_token, role, content))
    db.commit()

def get_messages(chat_id, user_token):
    db = get_db()
    cur = db.execute("SELECT role, content FROM message WHERE chat_id=? AND user_token=? ORDER BY id", (chat_id, user_token))
    return cur.fetchall()

def get_chat_list(user_token):
    db = get_db()
    cur = db.execute("SELECT id, title FROM chat WHERE user_token=? ORDER BY created_at DESC", (user_token,))
    return cur.fetchall()

def update_chat_title(chat_id, user_token, title):
    db = get_db()
    db.execute("UPDATE chat SET title=? WHERE id=? AND user_token=?", (title, chat_id, user_token))
    db.commit()

def chat_exists(chat_id, user_token):
    db = get_db()
    cur = db.execute("SELECT 1 FROM chat WHERE id=? AND user_token=?", (chat_id, user_token))
    return cur.fetchone() is not None

def has_user_messages(chat_id, user_token):
    db = get_db()
    cur = db.execute("SELECT 1 FROM message WHERE chat_id=? AND user_token=? AND role='user' LIMIT 1", (chat_id, user_token))
    return cur.fetchone() is not None

def parse_streamed_response(lines):
    for line in lines:
        matches = re.findall(r'(\w+):"((?:[^"\\]|\\.)*)"', line)
        for key, value in matches:
            if key == "0":
                value = value.replace('\\"', '"').replace('\\\\', '\\').replace('\\n', '\n')
                yield value

@app.route("/", methods=["GET"])
def index():
    user_token = request.cookies.get("user_token")
    if not user_token:
        user_token = str(uuid.uuid4())
        resp = make_response(render_template("index.html"))
        resp.set_cookie("user_token", user_token, max_age=60*60*24*365*5)
        return resp
    return render_template("index.html")

@app.route("/send-message", methods=["POST"])
def send_message():
    user_token = request.cookies.get("user_token")
    if not user_token:
        return jsonify({"error": "No user token"}), 400

    data = request.form
    user_message = data.get("message", "")
    chat_id = data.get("chat_id", "")
    model = data.get("model", "gpt-4.1")  # 기본값 gpt-4.1

    # 채팅 ID 검증 및 생성
    if not chat_id or not chat_exists(chat_id, user_token):
        chat_id = str(uuid.uuid4())
        create_chat(chat_id, user_token)
        
        # 시스템 메시지 추가
        today_str = datetime.now().strftime("%Y-%m-%d")
        system_msg = f"""You are ChatGPT, a large language model trained by OpenAI.

Knowledge cutoff: 2024-06
Current date: {today_str}

Image input capabilities: Enabled
Personality: v2

Instructions:
- Engage warmly yet honestly with the user.
- Be direct; avoid ungrounded or sycophantic flattery.
- Maintain professionalism and grounded honesty that best represents OpenAI and its values.
- Ask a general, single-sentence follow-up question when natural.
- Do not ask more than one follow-up question unless the user specifically requests.
**IMPORTANT: When you need to display mathematical formulas, ALWAYS USE LaTeX syntax and enclose block formulas with DOUBLE DOLLAR SIGNS ($$ ... $$), and inline formulas with single dollar signs ($ ... $). Do not use [ ... ] or other delimiters.**
"""
        save_message(chat_id, user_token, "system", system_msg)

    save_message(chat_id, user_token, "user", user_message)

    messages = get_messages(chat_id, user_token)
scis@100410    payload = {
        "messages": [dict(m) for m in messages],
        "model": model,   # 사용자가 선택한 모델로 설정
    }
    print(payload, flush=True)

    def generate():
        with requests.post(API_URL, json=payload, stream=True) as r:
            buffer = ""
            for chunk in r.iter_content(chunk_size=1024, decode_unicode=False):
                try:
                    buffer += chunk.decode("utf-8")
                except UnicodeDecodeError:
                    continue
                while "\n" in buffer:
                    line, buffer = buffer.split("\n", 1)
                    line = line.strip()
                    if line:
                        for text in parse_streamed_response([line]):
                            yield text

    return Response(generate(), mimetype='text/plain', headers={'X-Chat-Id': chat_id})

@app.route("/save-ai-response", methods=["POST"])
def save_ai_response():
    user_token = request.cookies.get("user_token")
    if not user_token:
        return jsonify({"status": "error", "message": "No user token"})

    data = request.get_json()
    ai_response = data.get('response', '')
    chat_id = data.get('chat_id', '')

    if not chat_id or not ai_response:
        return jsonify({"status": "error", "message": "채팅 없음"})

    save_message(chat_id, user_token, "assistant", ai_response)
    return jsonify({"status": "success"})

@app.route("/generate-title", methods=["POST"])
def generate_title():
    user_token = request.cookies.get("user_token")
    if not user_token:
        return jsonify({"status": "error", "message": "No user token"})

    data = request.get_json()
    chat_id = data.get('chat_id', '')

    db = get_db()
    cur = db.execute("SELECT title FROM chat WHERE id=? AND user_token=?", (chat_id, user_token))
    row = cur.fetchone()
    if not row:
        return jsonify({"status": "error", "message": "채팅 없음"})
    if row['title'] and row['title'] != "새 채팅":
        return jsonify({"status": "skip", "title": row['title']})

    cur = db.execute(
        "SELECT role, content FROM message WHERE chat_id=? AND user_token=? AND role IN ('user','assistant') ORDER BY id DESC LIMIT 4",
        (chat_id, user_token))
    context = [dict(m) for m in reversed(cur.fetchall())]

    system_prompt = {
        "role": "system",
        "content": "아래 대화를 10자 이내로 요약해서 제목을 만들어줘. 따옴표, 마침표 없이 간결하게."
    }
    messages = [system_prompt] + context

    try:
        response = client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=messages,
            web_search=False,
            provider=OIVSCodeSer0501
        )
        title = response.choices[0].message.content.strip()
        title = title.replace('"', '').replace("'", '').replace('.', '').strip()
        update_chat_title(chat_id, user_token, title[:20])
        return jsonify({"status": "success", "title": title[:20]})
    except Exception as e:
        print("제목 생성 오류:", e)
        return jsonify({"status": "error", "message": str(e)})

@app.route("/new-chat", methods=["POST"])
def new_chat():
    user_token = request.cookies.get("user_token")
    if not user_token:
        return jsonify({"error": "No user token"}), 400

    db = get_db()
    # 가장 최근에 생성된 채팅 중에서 사용자 메시지가 없는 채팅이 있는지 확인
    cur = db.execute("""
        SELECT c.id 
        FROM chat c 
        WHERE c.user_token = ? 
        AND NOT EXISTS (
            SELECT 1 FROM message m 
            WHERE m.chat_id = c.id 
            AND m.user_token = c.user_token 
            AND m.role = 'user'
        )
        ORDER BY c.created_at DESC 
        LIMIT 1
    """, (user_token,))
    
    existing_empty_chat = cur.fetchone()
    
    if existing_empty_chat:
        # 빈 채팅이 있으면 그것을 반환
        return jsonify({"chat_id": existing_empty_chat["id"]})
    else:
        # 없으면 새로 생성
        chat_id = str(uuid.uuid4())
        create_chat(chat_id, user_token)
        return jsonify({"chat_id": chat_id})

@app.route("/get-chat-history", methods=["GET"])
def get_chat_history():
    user_token = request.cookies.get("user_token")
    if not user_token:
        return jsonify({"messages": []})
    chat_id = request.args.get("chat_id")
    if not chat_id or not chat_exists(chat_id, user_token):
        return jsonify({"messages": []})
    messages = get_messages(chat_id, user_token)
    chat_messages = [dict(m) for m in messages if m['role'] != 'system']
    return jsonify({"messages": chat_messages})

@app.route("/c/<chat_id>")
def chat_by_id(chat_id):
    user_token = request.cookies.get("user_token")
    if not user_token:
        user_token = str(uuid.uuid4())
        resp = make_response(render_template("index.html", chat_id=chat_id))
        resp.set_cookie("user_token", user_token, max_age=60*60*24*365*5)
        return resp
    return render_template("index.html", chat_id=chat_id)

@app.route("/<chat_id>")
def chat_by_id_short(chat_id):
    # chat_id가 uuid 형식일 때만 허용
    import re
    if not re.match(r"^[0-9a-fA-F-]{36}$", chat_id):
        return index()
    user_token = request.cookies.get("user_token")
    if not user_token:
        user_token = str(uuid.uuid4())
        resp = make_response(render_template("index.html", chat_id=chat_id))
        resp.set_cookie("user_token", user_token, max_age=60*60*24*365*5)
        return resp
    return render_template("index.html", chat_id=chat_id)
    
@app.route("/get-chat-list", methods=["GET"])
def get_chat_list_route():
    user_token = request.cookies.get("user_token")
    if not user_token:
        return jsonify({"chats": []})
    
    chats = get_chat_list(user_token)
    chat_list = []
    
    for chat in chats:
        title = chat["title"] if chat["title"] else "새 채팅"
        chat_list.append({"chat_id": chat["id"], "title": title})
    
    return jsonify({"chats": chat_list})

if not os.path.exists(DB_PATH):
    init_db()
else:
    try:
        db = get_db()
        db.execute("SELECT 1 FROM chat LIMIT 1")
        db.execute("SELECT 1 FROM message LIMIT 1")
    except Exception:
        init_db()

if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=80)
